<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" name="IIQDevAcceleratorWF">
  <Variable name="transient" initializer="true"/>
  <Variable name="payload" type="java.lang.Object" output="true"/>
  <Step icon="Start" name="Start">
    <Script>
      <Source>
        import org.apache.log4j.Logger;
        Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
        iidDevAccelLogger.debug("Workflow IIQDevAcceleratorWF started for operation: " + operation); 
      </Source>
    </Script>
    <Transition to="Get Version" when='"getVersion".equals(operation);'/>
    <Transition to="Import" when='"Import".equals(operation);'/>
    <Transition to="Get Classes" when='"getClasses".equals(operation);'/>
    <Transition to="Get Class Objects" when='"getClassObjects".equals(operation);'/>
    <Transition to="Get Object" when='"getObject".equals(operation);'/>
    <Transition to="Delete Object" when='"deleteObject".equals(operation);'/>
    <Transition to="Get Task List" when='"getTaskList".equals(operation);'/>
    <Transition to="Run Task" when='"runTask".equals(operation);'/>
    <Transition to="Get Rules" when='"getRules".equals(operation);'/>
    <Transition to="Run Rule" when='"runRule".equals(operation);'/>
    <Transition to="Eval BS" when='"evalBS".equals(operation);'/>
    <Transition to="Get Log File" when='"getLog".equals(operation);'/>
    <Transition to="Reload Log File" when='"reloadLog".equals(operation);'/>
    <Transition to="Get System Info" when='"getSysInfo".equals(operation);'/>
    <Transition to="Import Java" when='"importJava".equals(operation);'/>
    <Transition to="Import Certificate" when='"ImportCertificate".equals(operation);'/>
    <Transition to="Restart Tomcat" when='"RestartTomcat".equals(operation);'/>
    <Transition to="Invalid operation"/>
  </Step>
  <Step icon="Default" name="Get Version" resultVariable="payload">
    <Script>
      <Source>
        import org.apache.log4j.Logger;
        Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
        iidDevAccelLogger.debug("GetVersion is called");
        return "10.0.57";
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Provision" name="Import" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.server.Importer; 
          import sailpoint.tools.GeneralException; 
          import sailpoint.web.system.ImportBean.ImportMonitor; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 

          iidDevAccelLogger.debug("Started Importer"); 
          Importer importer = new Importer(context, new ImportMonitor()); 
          try { 
            //iidDevAccelLogger.debug("File content: " + resource); 
            importer.importXml(resource); 
            context.commitTransaction(); 
          } 
          catch (Exception e) {
            iidDevAccelLogger.error("Importer failed with exception: " + e); 
            return e.toString(); 
          } 
          return "success"; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Classes" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started getting classes"); 
          List resultArray = new ArrayList();
          for(Class cls : ClassLists.MajorClasses){
            boolean objExists = false;
            try{
              //make sure search operation works on this class and it has objects
              Iterator it = context.search(cls, new QueryOptions().setResultLimit(1), "name");
              objExists = it.hasNext();
            }
            catch(Exception e){
              iidDevAccelLogger.debug("Class " + cls + " can't be searched"); 
            }
            if(objExists){
              resultArray.add(cls.getSimpleName());
            }
          }
          iidDevAccelLogger.debug("Finished getting classes"); 
          return resultArray; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Class Objects" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started getting class objects for " + theClass); 
          Class myClass = null;
          for(Class cls : ClassLists.MajorClasses){
            if(cls.getSimpleName().equals(theClass)){
              myClass = cls;
              break;
            }
          }
          if(null == myClass){
            iidDevAccelLogger.debug("Couldn't find class " + theClass);
            return "fail"; 
          }

          String field = "name";
          if(theClass.equals("Identity")){
            field = "displayName";
          }
          
          QueryOptions qo = new QueryOptions();
          iidDevAccelLogger.debug("orderby = " + orderby); 
          if (null != orderby && void != orderby && !orderby.isEmpty()) {
              boolean ascending = orderby.startsWith("-");
              String property = orderby.replaceAll("^[+-]","");
              qo.addOrdering(property, ascending);
          }

          List resultArray = new ArrayList();
          Iterator it = context.search(myClass, qo, field);
          while(it.hasNext()){
            Object[] obj = it.next();
            resultArray.add(obj[0]);
          }
          
          iidDevAccelLogger.debug("Finished getting class objects"); 
          return resultArray; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Object" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started getting object for " + theClass + " and " + objName); 
          Class myClass = null;
          for(Class cls : ClassLists.MajorClasses){
            if(cls.getSimpleName().equals(theClass)){
              myClass = cls;
              break;
            }
          }
          if(null == myClass){
            iidDevAccelLogger.error("Couldn't find class " + theClass);
            return "fail"; 
          }

          String field = "name";
          if(theClass.equals("Identity")){
            field = "displayName";
          }
          SailPointObject obj = null;
          if(void == objId || null == objId){
            iidDevAccelLogger.info("Getting unique object");
            obj = context.getUniqueObject(myClass, Filter.eq(field, objName));
          }
          else{
            iidDevAccelLogger.info("Getting object by Id");
            obj = context.getObjectById(myClass, objId); 
          }
          
          if(null == obj){
            iidDevAccelLogger.error("Couldn't find the object");
            return "fail"; 
          }
          iidDevAccelLogger.debug("Finished getting an object"); 
          return obj.toXml(); 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Delete Object" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import sailpoint.api.*;
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started deleting object for " + theClass + " and " + objName); 
          Class myClass = null;
          for(Class cls : ClassLists.MajorClasses){
            if(cls.getSimpleName().equals(theClass)){
              myClass = cls;
              break;
            }
          }
          if(null == myClass){
            iidDevAccelLogger.error("Couldn't find class " + theClass);
            return "fail"; 
          }

          Terminator terminator = new Terminator(context);
          terminator.setTrace(true);
          if(void == objId || null == objId){
            iidDevAccelLogger.info("Deleting objects by names");
            String field = "name";
            if(theClass.equals("Identity")){
              field = "displayName";
            }

            iidDevAccelLogger.debug("Objects to delete: " + objNames); 
            
            for(String objName : objNames){
              SailPointObject obj = context.getUniqueObject(myClass, Filter.eq(field, objName));
              if(null == obj){
                iidDevAccelLogger.error("Couldn't find the object: " + objName);
                continue; 
              }
              terminator.deleteObject(obj);

              iidDevAccelLogger.debug("Finished deleting object"); 
            }
          }
          else{
            iidDevAccelLogger.info("Deleting an object by Id=" + objId);
            SailPointObject obj = context.getObjectById(myClass, objId); 
            if(null == obj){
              iidDevAccelLogger.error("Couldn't find the object: " + objId);
              return "Couldn't find the object of class=" + myClass + " and id=" + objId; 
            }
            terminator.deleteObject(obj);
            iidDevAccelLogger.debug("Finished deleting object"); 
          }
          return "success"; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Task List" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started Get Task List"); 

          List taskDefinitions = context.getObjects(TaskDefinition.class); 
          List resultArray = new ArrayList(); 
          for (TaskDefinition taskDefinition: taskDefinitions) { 
            if(!taskDefinition.isHidden() && !taskDefinition.isTemplate() ){ 
              resultArray.add(taskDefinition.getName()); 
            } 
          } 
          iidDevAccelLogger.debug("Exiting Get Task List with  " + resultArray.size() + " tasks"); 
          return resultArray; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Run Task" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import sailpoint.api.TaskManager; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Started Run Task: " + taskName); 

          TaskManager tm = new TaskManager(context); 
          TaskDefinition taskDefinition = context.getObjectByName(TaskDefinition.class, taskName); 
          if(null == taskDefinition) { 
            iidDevAccelLogger.debug("Couldn't fine task: " + taskName); 
            return "fail"; 
          } 
          TaskSchedule ts = tm.run(taskDefinition, inputArgs); 
          TaskResult tr = null; 
          iidDevAccelLogger.debug("Start monitoring for task results..."); 
          while (null == tr) { 
            tr = ts.getLatestResult(); 
            Thread.sleep(50);
          } 
          iidDevAccelLogger.debug("Finished monitoring task results, result: " + tr); 

          SailPointObject obj = null;
          int cnt = 0;
          int max_cnt = 10;
          while (null == obj) { 
            String taskId = tr.getId();
            iidDevAccelLogger.error("Tring to get TaskResult with id=" + taskId);
            Thread.sleep(50);
            obj = context.getObjectById(TaskResult.class, taskId);
            tr = ts.getLatestResult(); 
            if(cnt++ > max_cnt){
              iidDevAccelLogger.error("Couldn't find the TaskResult object within a number of attempts");
              break;
            }
          } 
          if(null == obj){
            iidDevAccelLogger.error("Couldn't find the TaskResult object");
            return nill; 
          }
          iidDevAccelLogger.debug("Finished getting an object"); 
          return obj.toXml(); 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Rules" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*; 
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          QueryOptions qo = new QueryOptions();
          if(void != ruleName && null != ruleName){
            Filter f = Filter.eq("name", ruleName);
            qo.addFilter(f);
          }
          List rules=context.getObjects(Rule.class, qo); 
          iidDevAccelLogger.debug("got " + rules.size()); 
          Map objMap = new HashMap();

          for (Rule rule: rules) { 
            List args = new ArrayList(); 
            for (Argument arg: rule.getSignature().getArguments()) { 
              args.add(arg.getName()); 
            } 
            objMap.put(rule.getName(), args);
          } 
          iidDevAccelLogger.debug("returning " + objMap.keySet().size() + " rules"); 
          return objMap; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Run Rule" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import java.util.*;
          import org.apache.log4j.Logger;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Run Rule: " + ruleName); 
          Object result = null;
          try{
            Rule rule = (Rule)context.getObjectByName(Rule.class, ruleName);
            result = context.runRule(rule, inputArgs);
          }
          catch(Exception e){
            iidDevAccelLogger.debug("Exception: " + e.toString()); 
            result = e.toString();
          }
          iidDevAccelLogger.debug("Exiting rule with result: " + result); 
          return null != result ? result:"null"; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Eval BS" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import java.util.*;
          import java.io.*;
          import bsh.Interpreter;
          import org.apache.log4j.Logger;
          String injectContext = "import sailpoint.api.*;\nSailPointContext context = SailPointFactory.createPrivateContext();\n";

          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Evaluating beanshell script" + script); 
          File scriptFile = File.createTempFile("beanshell", null);
          //iidDevAccelLogger.debug("temp path: " + scriptFile.getAbsolutePath()); 
          BufferedWriter bw = new BufferedWriter(new FileWriter(scriptFile));
          bw.write(injectContext + script);
          bw.close();
          Object result = null;
          try{
            Interpreter interpreter = new Interpreter();
            result = interpreter.source(scriptFile.getAbsolutePath());
          }
          catch(Exception e){
            result = e.toString();
          }
          scriptFile.deleteOnExit();
          if(null == result){
            result = "empty result";
          }
          iidDevAccelLogger.debug("Script evaluated with: " + result); 
          return result; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get Log File" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import java.util.*;
          import java.io.*;
          import java.nio.file.*;
          import java.nio.charset.StandardCharsets;
          import org.apache.log4j.Logger;
          import org.apache.logging.log4j.LogManager;
          import org.apache.logging.log4j.core.LoggerContext;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Getting log file...");
          String[] logToSearchArr = {"log4j2.properties", "log4j.properties"};
          String contents = null;
          String logFileName = null;
          for(int i = 0; i < logToSearchArr.length; i++){
            String logToSearch = logToSearchArr[i];
            iidDevAccelLogger.debug("Searing for " + logToSearch + "...");
            logFileName = Util.findFile("user.dir", logToSearch, true);
            if(null != logFileName){
              iidDevAccelLogger.debug("Found: " + logFileName);
              break;
            }
          }
          if(null == logFileName){
            iidDevAccelLogger.debug("Couldn't find a log4j file");
            return contents;
          }
          try{
            contents = new String(Files.readAllBytes(Paths.get(logFileName)));
          }
          catch(Exception e){
            iidDevAccelLogger.debug("Exception during reading file: " + e.toString());
            return "failed";
          }

          iidDevAccelLogger.debug("Successfully read a log4j file contents"); 
          return contents; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Reload Log File" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import java.util.*;
          import java.io.*;
          import org.apache.log4j.Logger;
          import org.apache.logging.log4j.LogManager;
          import org.apache.logging.log4j.core.LoggerContext;
          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Reloading logging config...");
          String[] logToSearchArr = {"log4j2.properties", "log4j.properties"};
          String logFileName = null;
          for(int i = 0; i < logToSearchArr.length; i++){
            String logToSearch = logToSearchArr[i];
            iidDevAccelLogger.debug("Searing for " + logToSearch + "...");
            logFileName = Util.findFile("user.dir", logToSearch, true);
            if(null != logFileName){
              iidDevAccelLogger.debug("Found: " + logFileName);
              break;
            }
          }
          if(null == logFileName){
            iidDevAccelLogger.debug("Couldn't find a log4j file, nothing to refresh");
            return "failed, no existing file";
          }

          try{
            FileWriter myWriter = new FileWriter(logFileName);
            myWriter.write(logContent);
            myWriter.close();
            iidDevAccelLogger.debug("Updated " + logFileName + " with " + logContent.length() + " bytes of content");
          }
          catch(Exception e){
            iidDevAccelLogger.debug("Exception during writing to file: " + e.toString());
            return "failed";
          }
          File logFile = new File(logFileName);
          LoggerContext loggerContext = (LoggerContext)LogManager.getContext(false);
          loggerContext.setConfigLocation(logFile.toURI());

          iidDevAccelLogger.debug("Finished reloading logging config"); 
          return "succeeded"; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Get System Info" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import java.util.*;
          import java.io.*;
          import java.nio.file.*;
          import java.nio.charset.StandardCharsets;
          import org.apache.log4j.Logger;
          import org.apache.logging.log4j.LogManager;
          import org.apache.logging.log4j.core.LoggerContext;
          import sailpoint.tools.Util;
          import sailpoint.Version;

          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Getting System Info...");
          String[] logToSearchArr = {"log4j2.properties", "log4j.properties"};
          String contents = "";
          contents += String.format("Product information: \n\n");
          contents += String.format("  Version: %s\n", Version.getFullVersion());
          contents += String.format("  Source Repository Location: %s\n", Version.getRepoLocation());
          contents += String.format("  Bulder: %s\n", Version.getBuilder());
          contents += String.format("  Build Date: %s\n", Version.getBuildDate());
          contents += String.format("  ApplicationHome: %s\n", Util.getApplicationHome());
          contents += String.format("  HostName: %s\n", Util.getHostName());
          contents += String.format(" %s\n\n", Util.getMemoryStats());
          contents += String.format("Java System Properties\n\n");
          Enumeration e = System.getProperties().propertyNames();
          while(e.hasMoreElements()) {
            String key = e.nextElement().toString();
            contents += String.format("  %s: %s\n", key, System.getProperty(key));
          }

          iidDevAccelLogger.debug("Successfully read a log4j file contents"); 
          return contents; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Import Java" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
          import sailpoint.object.*;
          import java.util.*;
          import java.io.*;
          import java.nio.file.*;
          import java.nio.charset.StandardCharsets;
          import org.apache.log4j.Logger;
          import org.apache.logging.log4j.LogManager;
          import org.apache.logging.log4j.core.LoggerContext;
          import sailpoint.tools.Util;
          import sailpoint.Version;
          import org.apache.commons.codec.binary.Base64;
          import com.sun.jdi.Bootstrap;
          import com.sun.jdi.ReferenceType;
          import com.sun.jdi.VirtualMachine;
          import com.sun.jdi.VirtualMachineManager;
          import com.sun.jdi.connect.AttachingConnector;
          import com.sun.jdi.connect.Connector.Argument;

          Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
          iidDevAccelLogger.debug("Starting Java class import for " + numberOfFiles + " files. " + clazzPaths);

          private restartTomcat(){
            iidDevAccelLogger.debug("Restarting Tomcat");         
            File webXML = new File(Util.getApplicationHome() + "WEB-INF/web.xml");
            long timestamp = System.currentTimeMillis();
            webXML.setLastModified(timestamp);
          }
          private VirtualMachine getVM(){
            VirtualMachine vm = null;
            try{
              VirtualMachineManager virtualMachineManager = Bootstrap.virtualMachineManager();
              List attachingConnectors = virtualMachineManager.attachingConnectors();
              Iterator connectorIterator = attachingConnectors.iterator();

              while(connectorIterator.hasNext()) {
              iidDevAccelLogger.debug("connectorIterator.hasNext() succeeded");
                AttachingConnector conn = (AttachingConnector)connectorIterator.next();
                if (conn.transport().name().equals(debugTransport)) {
                  iidDevAccelLogger.debug("conn.transport.name is " + debugTransport);
                  Map args = conn.defaultArguments();
                  Argument arg = args.get("port");
                  arg.setValue(debugPort);
                  args.put("port", arg);
                  arg = args.get("hostname");
                  arg.setValue(host);
                  args.put("hostname", arg);
                  iidDevAccelLogger.debug("before conn.attach");
                  vm = conn.attach(args);
                  iidDevAccelLogger.debug("after conn.attach");
                  if(null != vm){
                    break;
                  }
                }
              }
            }
            catch(Exception e){
              iidDevAccelLogger.debug("Virtual Machine connector attach failed: " + e.getMessage());
            }
            return vm;
          }

          private String uploadClass(File file, byte[] classBytes){
            iidDevAccelLogger.debug("Uploading " + file);

            String result = "success";
            try
            {
              FileOutputStream fos = new FileOutputStream(file);
              fos.write(classBytes);
              fos.flush();
              fos.close();
            } catch (IOException e) {
              result = e.getMessage();
              iidDevAccelLogger.error("Error uploading file:  " + result);
            }
            return result;
          }

          private boolean isHotSwapNeeded(VirtualMachine vm, ArrayList classNames){
            boolean result = false;
            if(null == vm){
              return false;
            }
            for (String className: classNames){
              List referenceTypes = vm.classesByName(className);
              if (referenceTypes.size() > 0) {
                result = true;
              }
            }
            return result;
          }
          private String doHotSwap(VirtualMachine vm){
            if(null == vm){
              return "Failed to get hotswap environment";
            }

            Map updatedMap = new HashMap();
            String status = "";

            for (int i = 0; i < numberOfFiles; i++){
              String className = clazzNames.get(i);
              byte[] classBytes = Base64.decodeBase64(clazzBytess.get(i).getBytes(StandardCharsets.US_ASCII));

              List referenceTypes = vm.classesByName(className);
              if (0 == referenceTypes.size()) {
                status += "Failed to find a loaded class in VM: " + className + ";\n\r";
                continue;
              }
              if(!vm.canRedefineClasses()) {
                status +=  "Can't redefine classes in this VM: " + className + ";\n\r";
                continue;
              }

              updatedMap.put(referenceTypes.get(0), classBytes);
            }

            try{
              iidDevAccelLogger.debug("Doing hotswap...");
              vm.redefineClasses(updatedMap);
            }
            catch(Exception e){
              iidDevAccelLogger.error("Exceptoin in doHotSwap: " + e.getMessage());
              return e.getMessage();
            }
            if(status.length() == 0){
              status = "success";
            }
            return status;
          }

          Map returnMap = new HashMap();
          VirtualMachine vm = getVM();
          String uploadingErrors = "";
          iidDevAccelLogger.debug("Number of files: " + numberOfFiles);
          iidDevAccelLogger.debug("ClazzPaths: " + clazzPaths);
          iidDevAccelLogger.debug("clazzBytess: " + clazzBytess);
          for (int i = 0; i < numberOfFiles; i++){
            String fullPath = Util.getApplicationHome() + "WEB-INF/classes/" + clazzPaths.get(i);
            iidDevAccelLogger.debug("Full class path: " + fullPath);
            File file = new File(fullPath);
            Files.createDirectories(Paths.get(file.getParent()));
            boolean fileDeleteResult = Files.deleteIfExists(file.toPath());
            iidDevAccelLogger.debug("Class path: " + fullPath + ". " + (fileDeleteResult == true ? "Old file was deleted":"Old file didn't exist"));
            byte[] classBytes = Base64.decodeBase64(clazzBytess.get(i).getBytes(StandardCharsets.US_ASCII));
            String uploadResult = uploadClass(file, classBytes);
            if(!uploadResult.equals("success")){
              uploadingErrors += uploadResult + ";\n\r";
            }
          }
          if(uploadingErrors.length() != 0){
            iidDevAccelLogger.error("uploadFailure: " + uploadingErrors);
            returnMap.put("uploadFailure", uploadingErrors);
            return returnMap;
          }

          try{
            if(null != vm){
              if(isHotSwapNeeded(vm, clazzNames)){
                iidDevAccelLogger.debug("HotSwap is needed, that means that the class is already loaded");
                String hotSwapResult = doHotSwap(vm);
                if(!hotSwapResult.equals("success")){
                  returnMap.put("hotswapFailure", hotSwapResult);
                  restartTomcat();
                }
              }
              else{
                iidDevAccelLogger.debug("HotSwap is not needed, we just uploaded the class file and you can use the new java class");
              }
            }
            else{
              iidDevAccelLogger.debug("Failed to get hotswap environment, restarting tomcat");
              returnMap.put("hotswapFailure", "Failed to get hotswap environment");
              restartTomcat();
            }
          }
          catch(Exception e){
            iidDevAccelLogger.error("Exception during hotswapping...: " + e.getMessage());
          }
          finally{
            if(null != vm){
              iidDevAccelLogger.debug("Finally disposing vm...");
              vm.dispose();
            }

          }

          iidDevAccelLogger.debug("Successfully imported a java file: " + returnMap.toString());
          return returnMap; 
          ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  
  <Step icon="Provision" name="Import Certificate" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
        import sailpoint.tools.GeneralException; 
        import org.apache.log4j.Logger;
        import java.util.*;
        import java.io.*;
        import java.nio.file.*;
        import java.nio.charset.StandardCharsets;
        import sailpoint.tools.Util;
        import org.apache.commons.codec.binary.Base64;
        import java.io.IOException;

        Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 

        private void createDirectory(String directoryPath) {
          Path path = Paths.get(directoryPath);
          if (!Files.exists(path)) {
            try {
              Files.createDirectories(path);
              iidDevAccelLogger.debug("Directory " + directoryPath + " created successfully!" ); 
            } catch (IOException e) {
              iidDevAccelLogger.error("Error creating directory: " + e.getMessage()); 
            }
          } else {
            iidDevAccelLogger.debug("Directory " + directoryPath + " already exists" ); 
          }
        }

        private String createFile(byte[] classBytes, String filePath){
          String result = "success";
          iidDevAccelLogger.debug("Trying to create a file " + filePath); 
          File file = new File(filePath);
          try
          {
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(classBytes);
            fos.flush();
            fos.close();
          } catch (IOException e) {
            iidDevAccelLogger.error("Failed to create a file " + e.getMessage()); 
            result = e.getMessage();
          }
          iidDevAccelLogger.debug("File was successfully created!"); 
          return result;
        }
        private String noExtension(String filename) {
          Path path = Paths.get(filename);
          String fileName = path.getFileName().toString();
          int dotIndex = fileName.lastIndexOf('.');
          if (dotIndex == -1) {
            return fileName;
          } else {
            return fileName.substring(0, dotIndex);
          }
        }

        private String importCertificate(String certFile, String certName, String password){
          iidDevAccelLogger.debug("Enter importCertificate"); 
          String result = "";
          try {
            String[] command = {
                "keytool",
                "-importcert",
                "-cacerts",
                "-noprompt",
                "-alias",
                certName,
                "-file",
                certFile,
                "-storepass",
                password
            };

            ProcessBuilder processBuilder = new ProcessBuilder(command);
            Process process = processBuilder.start();

            InputStream inputStream = process.getInputStream();
            BufferedReader inputReader = new BufferedReader(new InputStreamReader(inputStream));
            String line;
            String output = "";
            iidDevAccelLogger.debug("Output stream:"); 
            while ((line = inputReader.readLine()) != null) {
              iidDevAccelLogger.debug(line); 
              result += line;
            }
            
            InputStream errorStream = process.getErrorStream();
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(errorStream));
            iidDevAccelLogger.debug("Error stream:"); 
            while ((line = errorReader.readLine()) != null) {
              iidDevAccelLogger.debug(line); 
              result += line;
            }

            int exitCode = process.waitFor();
            if (exitCode == 0) {
              result = "success";
              iidDevAccelLogger.debug("Command executed successfully."); 
            } else {
              iidDevAccelLogger.debug("Command execution failed. Exit code: " + exitCode); 
            }
            
          } catch (Exception e) {
            iidDevAccelLogger.error("Error executing keytool command: " + e.getMessage()); 
            result = e.getMessage();
          }
          iidDevAccelLogger.debug("Exit importCertificate"); 
          return result;
        }

        private restartTomcat(){
          iidDevAccelLogger.debug("Restarting Tomcat");         
          File webXML = new File(Util.getApplicationHome() + "WEB-INF/web.xml");
          long timestamp = System.currentTimeMillis();
          webXML.setLastModified(timestamp);
        }
        String tempDirPath = Util.getApplicationHome() + "certificatesTemp";
        createDirectory(tempDirPath);

        byte[] fileContentBytes = fileContent.getBytes(StandardCharsets.US_ASCII);
        String certFile = tempDirPath + "/" + certFileName;
        String result = createFile(fileContentBytes, certFile);
        if(!result.equals("success")){
          return result;
        }
        String certName = noExtension(certFileName);
        result = importCertificate(certFile, certName, keyStorePassword);
        if(!result.contains("success")){
          return result;
        }
        if(restartTomcat){
          restartTomcat();
        }
        return "success";
      ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Provision" name="Restart Tomcat" resultVariable="payload">
    <Script>
      <Source>
        <![CDATA[ 
        import org.apache.log4j.Logger;
        import java.util.*;
        import java.io.*;
        import java.nio.file.*;
        import java.io.IOException;
        Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
        private restartTomcat(){
          iidDevAccelLogger.debug("Restarting Tomcat");         
          File webXML = new File(Util.getApplicationHome() + "WEB-INF/web.xml");
          long timestamp = System.currentTimeMillis();
          webXML.setLastModified(timestamp);
        }
        restartTomcat();
        return "success";
      ]]>
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Invalid operation" resultVariable="payload">
    <Script>
      <Source>
        import org.apache.log4j.Logger;
        Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
        iidDevAccelLogger.debug("Not supported operation: " + operation);         
        return operation + " not supported";
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop">
    <Script>
      <Source>
        import org.apache.log4j.Logger;
        Logger iidDevAccelLogger=Logger.getLogger("sailpoint.IIQDevAcceleratorWF"); 
        iidDevAccelLogger.debug("Workflow IIQDevAcceleratorWF stopped for operation: " + operation);
      </Source>
    </Script>
  </Step>
</Workflow>